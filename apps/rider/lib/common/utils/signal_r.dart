import 'dart:convert';import 'package:bot_toast/bot_toast.dart';import 'package:design/design.dart';import 'package:get/get.dart';import 'package:get/get_core/src/get_main.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';import 'package:lottie/lottie.dart';import 'package:rating_dialog/rating_dialog.dart';import 'package:rider/common/utils/signal_r_new.dart';import 'package:rider/features/data/models/delivers.dart';import 'package:rider/features/data/models/delivers_product.dart';import 'package:rider/features/presentation/pages/map/map_trip_product/map_trip_product.dart';import 'package:rider/main.dart';import '../../blocs/map_bloc.dart';import '../../features/data/data_sources/rider_api.dart';import '../../features/data/models/driver.dart';import '../../features/data/models/map_state.dart';import '../../features/data/models/marker_config.dart';import '../../features/injection/injection_network.dart';import '../../features/presentation/pages/map/main_screen/mainscreen.dart';import '../../features/presentation/pages/map/map_trip_live/map_trip_live.dart';import '../../features/presentation/pages/map/map_trip_live/providers/map_live_provider.dart';import '../../features/presentation/pages/map/map_trip_product/provider/map_trip_provider.dart';import '../../generated/assets.dart';import '../widgets/show_animation_dialog.dart';// Configer the loggingconst hubUrl = '$kBase' 'deliveryHub/';class SignalRRider {  static final SignalRRider _instance = SignalRRider._();  static const String connectionIsOpenPropName = "connectionIsOpen";  SignalRRider._();  factory SignalRRider() => _instance;  /// For open and close signal R  Future<bool> openConnection() async {    final hub = si<SignalRService>();    try {      await hub.openHub(hubUrl);      print("hub ${hub.isConnected(hubUrl)}");      hub.on(          hubUrl: hubUrl,          methodName: "ReceiveLocations",          method: onReceiveLocations);      hub.on(          hubUrl: hubUrl,          methodName: "ReceiveLocationsProduct",          method: onReceiveLocationsProduct);      hub.on(          hubUrl: hubUrl,          methodName: "ReceiveAcceptation",          method: onReceiveAcceptation);      hub.on(          hubUrl: hubUrl,          methodName: "ReceiveAcceptationProduct",          method: onReceiveAcceptationProduct);      hub.on(          hubUrl: hubUrl,          methodName: "ReceiveArrivedToLocation",          method: onReceiveArrivedToLocation);      hub.on(          hubUrl: hubUrl,          methodName: "ReceiveArrivedToLocationProduct",          method: onReceiveArrivedToLocationProduct);      hub.on(          hubUrl: hubUrl,          methodName: "ReceiveStarting",          method: onReceiveStarting);      hub.on(          hubUrl: hubUrl,          methodName: "ReceiveStartingProduct",          method: onReceiveStartingProduct);      hub.on(          hubUrl: hubUrl,          methodName: "ReceiveEndingCustomer",          method: onReceiveEndingCustomer);      hub.on(          hubUrl: hubUrl,          methodName: "ReceiveEndingCustomerProduct",          method: onReceiveEndingCustomerProduct);      hub.onClose(hubUrl, (e) => print("Connection Closed : $e"));      hub.onReconnecting(hubUrl, (e) => print("onٍReconnecting $e"));      hub.onReconnected(hubUrl, (id) => print("onReconnected $id"));      return true;    } catch (e) {      print("openHub error : $e");      return false;    }  }  Future<void> stopConnection() async {    print("stopConnection is fired ");    final hub = si<SignalRService>();    if (hub.isConnected('$kBase' 'deliveryHub/')) {      await hub.closeHub('$kBase' 'deliveryHub/');    }  }  //  ///1. AddDelivery (invoke) (Customer)  Future<dynamic> addDelivery({required Delivers deliver}) async {    print("AddDelivery is fired ");    try {      return si<SignalRService>().invoke(        hubUrl: hubUrl,        methodName: "AddDelivery",        args: <Object>[          {            'startLat': deliver.startLat.toString(),            'startLong': deliver.startLong.toString(),            'endLat': deliver.endLat.toString(),            'endLong': deliver.endLong.toString(),            'distance': deliver.distance,            'vehicleType': deliver.vehicleType,            'price': deliver.price,            'expectedTime': deliver.expectedTime,            'pickUp': deliver.pickUp.toString(),            'dropOff': deliver.dropOff.toString(),          }        ],      );    } catch (e) {      print("AddDelivery is catching error $e ");      if (e          .toString()          .contains('Cannot send data if the connection is not in the')) {}    }  }  // }  Future<void> addDeliveryProduct(      {required DeliversProduct deliverProduct}) async {    print("AddDelivery Product is fired ");    try {      return si<SignalRService>().invoke(        hubUrl: hubUrl,        methodName: "AddDeliveryProduct",        args: <Object>[          {            'startLat': deliverProduct.startLat.toString(),            'startLong': deliverProduct.startLong.toString(),            'endLat': deliverProduct.endLat.toString(),            'endLong': deliverProduct.endLong.toString(),            'distance': deliverProduct.distance,            'vehicleType': deliverProduct.vehicleType,            'price': deliverProduct.price,            'expectedTime': deliverProduct.expectedTime,            'pickUp': deliverProduct.pickUp.toString(),            'dropOff': deliverProduct.dropOff.toString(),            'details': deliverProduct.details!.map((e) => e.toJson()).toList(),          }        ],      );      print("AddDelivery is sending data ${json.encode({            'startLat': deliverProduct.startLat.toString(),            'startLong': deliverProduct.startLong.toString(),            'endLat': deliverProduct.endLat.toString(),            'endLong': deliverProduct.endLong.toString(),            'distance': deliverProduct.distance,            'vehicleType': deliverProduct.vehicleType,            'price': deliverProduct.price,            'expectedTime': deliverProduct.expectedTime,            'pickUp': deliverProduct.pickUp.toString(),            'dropOff': deliverProduct.dropOff.toString(),            'details': deliverProduct.details!.map((e) => e.toJson()).toList(),          })} ");    } catch (e) {      print("AddDelivery Product is catching error $e ");    }  }  Future<void> endDeliveryProductCustomer(      {required num price,      required String id,      required String endLat,      required String endLong,      required num distance,      required String dropOff,      required String expectedTime}) async {    print("EndDelivery Product Customer is fired ");    try {      si<SignalRService>().invoke(        hubUrl: hubUrl,        methodName: "EndDeliveryCustomerProduct",        args: <Object>[          {            'price': price,            'id': id,            'endLat': endLat,            'endLong': endLong,            'distance': distance,            'expectedTime': expectedTime,            'dropOff': dropOff          }        ],      );      print("EndDeliveryCustomerProduct is sending data ${json.encode({            'price': price,            'id': id,            'endLat': endLat,            'endLong': endLong,            'distance': distance,            'expectedTime': expectedTime,            'dropOff': dropOff          })} ");    } catch (e) {      print("EndDeliveryCustomerProduct is catching error $e ");    }  }  Future<void> endDeliveryCustomer(      {required num price,      required String id,      required String endLat,      required String endLong,      required num distance,      required String dropOff,      required String expectedTime}) async {    print("EndDeliveryCustomer is fired ");    try {      si<SignalRService>().invoke(        hubUrl: hubUrl,        methodName: "EndDeliveryCustomer",        args: <Object>[          {            'price': price,            'id': id,            'endLat': endLat,            'endLong': endLong,            'distance': distance,            'expectedTime': expectedTime,            'dropOff': dropOff          }        ],      );      print("EndDeliveryCustomer is sending data ${json.encode({            'price': price,            'id': id,            'endLat': endLat,            'endLong': endLong,            'distance': distance,            'expectedTime': expectedTime,            'dropOff': dropOff          })} ");    } catch (e) {      print("EndDeliveryCustomer is catching error $e ");    }  }  Future<void> removeDeliveryCustomer({    required String id,  }) async {    print("RemoveDelivery is fired ");    try {      BotToast.showLoading();      await si<SignalRService>().invoke(          hubUrl: hubUrl, methodName: "RemoveDelivery", args: <Object>[id]);      si<MapBloc>().clearPolyline();      si<MapBloc>().clearMarkers();      si<MapState>().pre = StatusTripMap.init;      si<MapState>().next = StatusTripMap.selectLocation;      si<MapState>().pinData.dropOffAddress = 'لم يتم التحديد بعد';      si<MapLiveProvider>().reset();      BotToast.closeAllLoading();      BotToast.showText(text: 'تم الغاء الرحلة');      Get.offAll(() => const MainScreen());      print("RemoveDelivery is sending data ${json.encode({            'id': id,          })} ");    } catch (e) {      print("RemoveDelivery is catching error $e ");    }  }//ReceiveAcceptation(Guid id) (on) (Customer) (driverId)// Notify by driver (Tell him that he had been accepted by driver blabla)  static void onReceiveAcceptation(List<Object>? arguments) {    try {      print("ReceiveAcceptation $arguments");      if (arguments != null) {        final provider = si<MapLiveProvider>();        if (provider.selectedDriverId == null) {          provider.setSelectedDriverIdAndOpenTrip(arguments[0].toString());          Get.offAll(() => const MapTripLive());        }      }    } catch (e) {      print("ReceiveAcceptation is catching error $e ");    }  }  void onReceiveLocations(List<Object>? arguments) {    try {      if (arguments != null) {        print("ReceiveLocations ${json.encode(arguments[0])}");        for (var item in arguments[0] as List) {          final driver = Driver.fromJson(item);          si<MapLiveProvider>().addDriver(driver);          if (driver.lat != null && driver.long != null) {            si<MapBloc>().setMarker(                MarkerConfig(                  point: LatLng(                      double.parse(driver.lat!), double.parse(driver.long!)),                  pinPath: driver.vehicleType == 500                      ? 'assets/images/moto_top.png'                      : Assets.iconsCarTop,                  markerId: MarkerId(driver.id.toString()),                  snippet: '${driver.name}',                  title: '${driver.isAvailable}',                ),                type: 1);          }        }      }    } catch (e) {      print("ReceiveLocations is catching error $e ");    }  }//ReceiveLocations list drivers//Notify by driver (Tell him that he has reach the start location)// Here you should putting some text telling the customer that driver has arrived  static void onReceiveArrivedToLocation(List<Object>? arguments) {    try {      print("ReceiveArrivedToLocation ${arguments}");      final provider = si<MapLiveProvider>();      provider.setStateTripProduct = provider.state.copyWith(number: 1);    } catch (e) {      print("ReceiveArrivedToLocation is catching error $e ");    }  }  static void onReceiveStarting(List<Object>? arguments) {    try {      print("ReceiveStarting ${arguments}");      final provider = si<MapLiveProvider>();      provider.setStateTripProduct = provider.state.copyWith(number: 2);    } catch (e) {      print("ReceiveStarting is catching error $e ");    }  }//Here the customer has to pay to the driver and you should showing him a model of rating the driver// Rating the driver request:// [HttpPut]// CustomerApp/RateDelivery(Guid id, double rate)// Response: bool// the id is deliveryId  static void onReceiveEndingCustomer(List<Object>? arguments) {    try {      print("ReceiveEndingCustomer ${arguments}");      final provider = si<MapLiveProvider>();      provider.setStateTripProduct = provider.state.copyWith(number: 3);      showAnimationDialog(          dialog: AlertDialog(        shape: RoundedRectangleBorder(          borderRadius: BorderRadius.circular(15.0),        ),        title: const Text("تفاصيل الرحلة"),        content: Column(          mainAxisSize: MainAxisSize.min,          children: [            Lottie.asset(              'lotti_files/22770-hello-peep.json',            ),            Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              children: [                Text(                  "الكلفة ",                  style: TextStyle(fontWeight: FontWeight.w600, fontSize: 25),                ),                Text(                  "${si<MapLiveProvider>().deliver?.price}  ل.س",                  style: TextStyle(fontWeight: FontWeight.w600, fontSize: 25),                ),              ],            ),            const Divider(),            const SizedBox(              height: 10,            ),            Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              children: [                Row(                  children: [                    const Icon(Icons.straighten_rounded),                    const SizedBox(                      width: 10,                    ),                    const Text(                      "المسافة ",                      style: TextStyle(fontWeight: FontWeight.w600),                    ),                  ],                ),                Text(                  "${si<MapLiveProvider>().deliver?.distance} متر",                ),              ],            ),            const Divider(),            Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              children: [                Row(                  children: [                    const Icon(Icons.access_time),                    const SizedBox(                      width: 10,                    ),                    const Text(                      "الوقت ",                      style: const TextStyle(fontWeight: FontWeight.w600),                    ),                  ],                ),                Text(                  "${si<MapLiveProvider>().deliver?.expectedTime?.replaceAll("mins", 'د')}",                ),              ],            ),          ],        ),        actions: <Widget>[          FlatButton(            child: const Text("تم"),            onPressed: () {              BotToast.cleanAll();              showDialog(                  context: ctx,                  builder: (context) => RatingDialog(                        initialRating: 1.0,// your app's name?                        title: const Text(                          'تقييم الرحلة',                          textAlign: TextAlign.center,                          style: TextStyle(                            fontSize: 25,                            fontWeight: FontWeight.bold,                          ),                        ),// encourage your user to leave a high rating?                        message: const Text(                          'نرجو أنك قد استمتعت برحلتك بشكل جيد، أرسل تقييمك لنا',                          textAlign: TextAlign.center,                          style: TextStyle(fontSize: 15),                        ),// your app's logo?                        image: Lottie.asset(Assets.lottieCarAnim, height: 200),                        submitButtonText: 'ارسال',                        onSubmitted: (response) async {                          BotToast.showLoading();                          await si<RiderApi>().rateDelivery(                              si<MapLiveProvider>().deliver!.id,                              response.rating);                          si<MapBloc>().clearPolyline();                          si<MapBloc>().clearMarkers();                          si<MapState>().pre = StatusTripMap.init;                          si<MapState>().next = StatusTripMap.selectLocation;                          si<MapState>().pinData.dropOffAddress =                              'لم يتم التحديد بعد';                          si<MapLiveProvider>().reset();                          BotToast.closeAllLoading();                          Get.offAll(const MainScreen());                        },                      ));// Get.back();            },          )        ],      ));    } catch (e) {      print("ReceiveEndingCustomer is catching error $e ");    }  }  /// PRODUCTS  void onReceiveLocationsProduct(List<Object>? arguments) {    try {      if (arguments != null) {        print("ReceiveLocations product ${json.encode(arguments[0])}");        for (var item in arguments[0] as List) {          final driver = Driver.fromJson(item);          si<MapTripProductProvider>().addDriver(driver);        }      }    } catch (e) {      print("ReceiveLocations product is catching error $e ");    }  }  static void onReceiveAcceptationProduct(List<Object>? arguments) {    try {      print("ReceiveAcceptationProduct $arguments");      if (arguments != null) {        final provider = si<MapTripProductProvider>();        if (provider.selectedDriverId == null) {          provider.setSelectedDriverIdAndOpenTrip(arguments[0].toString());          Get.to(() => const MapTripProduct());        }      }    } catch (e) {      print("ReceiveAcceptationProduct is catching error $e ");    }  }  static void onReceiveArrivedToLocationProduct(List<Object>? arguments) {    try {      print("ReceiveArrivedToLocationProduct ${arguments}");      final provider = si<MapTripProductProvider>();      provider.setStateTripProduct = provider.state.copyWith(number: 1);    } catch (e) {      print("ReceiveArrivedToLocationProduct is catching error $e ");    }  }  static void onReceiveStartingProduct(List<Object>? arguments) {    try {      print("ReceiveStarting Product ${arguments}");      final provider = si<MapTripProductProvider>();      provider.setStateTripProduct = provider.state.copyWith(number: 2);    } catch (e) {      print("ReceiveStarting Product is catching error $e ");    }  }  static void onReceiveEndingCustomerProduct(List<Object>? arguments) {    try {      print("ReceiveEndingCustomerProduct ${arguments}");      final provider = si<MapTripProductProvider>();      provider.setStateTripProduct = provider.state.copyWith(number: 3);      showAnimationDialog(          dialog: AlertDialog(        shape: RoundedRectangleBorder(          borderRadius: BorderRadius.circular(15.0),        ),        title: const Text("تفاصيل الرحلة"),        content: Column(          mainAxisSize: MainAxisSize.min,          children: [            Lottie.asset(              'lotti_files/22770-hello-peep.json',            ),            Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              children: [                Text(                  "الكلفة ",                  style: TextStyle(fontWeight: FontWeight.w600, fontSize: 25),                ),                Text(                  "${provider.deliverProduct?.price}  ل.س",                  style: TextStyle(fontWeight: FontWeight.w600, fontSize: 25),                ),              ],            ),            const Divider(),            const SizedBox(              height: 10,            ),            Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              children: [                Row(                  children: [                    const Icon(Icons.straighten_rounded),                    const SizedBox(                      width: 10,                    ),                    const Text(                      "المسافة ",                      style: TextStyle(fontWeight: FontWeight.w600),                    ),                  ],                ),                Text(                  "${provider.deliverProduct?.distance} متر",                ),              ],            ),            const Divider(),            Row(              mainAxisAlignment: MainAxisAlignment.spaceBetween,              children: [                Row(                  children: [                    const Icon(Icons.access_time),                    const SizedBox(                      width: 10,                    ),                    const Text(                      "الوقت ",                      style: const TextStyle(fontWeight: FontWeight.w600),                    ),                  ],                ),                Text(                  "${provider.deliverProduct?.expectedTime?.replaceAll("mins", 'د')}",                ),              ],            ),          ],        ),        actions: <Widget>[          FlatButton(            child: const Text("تم"),            onPressed: () {              BotToast.cleanAll();              BotToast.showLoading();              si<MapBloc>().clearPolyline();              si<MapBloc>().clearMarkers();              si<MapState>().pre = StatusTripMap.init;              si<MapState>().next = StatusTripMap.selectLocation;              si<MapState>().pinData.dropOffAddress = 'لم يتم التحديد بعد';              BotToast.closeAllLoading();              Get.offAll(() => MainScreen());// Get.back();            },          )        ],      ));    } catch (e) {      print("ReceiveEndingCustomerProduct is catching error $e ");    }  }}