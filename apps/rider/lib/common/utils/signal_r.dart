import 'package:core/core.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';import 'package:signalr_netcore/http_connection_options.dart';import 'package:signalr_netcore/hub_connection.dart';import 'package:signalr_netcore/hub_connection_builder.dart';import '../../libraries/init_app/run_app.dart';class SignalRRider {  static late HubConnection? _hubConnection;  static bool _connectionIsOpen = false;  static const String connectionIsOpenPropName = "connectionIsOpen";  static bool get connectionIsOpen => _connectionIsOpen;  /// For open and close signal R  static Future<bool> openConnection() async {    try {      _hubConnection = HubConnectionBuilder()          .withUrl('http://driveta2-001-site1.itempurl.com/deliveryHub/',              options: HttpConnectionOptions(                  accessTokenFactory: () => si<SStorage>().get(key: kAccessToken, type: ValueType.string)))          .build();      _hubConnection?.serverTimeoutInMilliseconds = 100000000000;      _hubConnection!.on("ReceiveAcceptation", onReceiveAcceptation);      if (_hubConnection!.state != HubConnectionState.Connected) {        await _hubConnection!.start();        /// to Save connection id in dataBase        _connectionIsOpen = true;        print("SignalR_is_hasConnection is $_connectionIsOpen");      } else {        print("Signal R is Connected");      }      return true;    } catch (e) {      logE("$e");      return false;    }  }  static Future<void> stopConnection() async {    if (_hubConnection!.state == HubConnectionState.Connected) {      await _hubConnection!.stop();      _hubConnection = null;      _connectionIsOpen = false;      print("SignalR is has$_connectionIsOpen");    }  }  static Future<void> sendLocation({LatLng? point}) async {    try {      if (connectionIsOpen == false || _hubConnection!.state != HubConnectionState.Connected) await openConnection();      if (point != null) {        try {          _hubConnection!.invoke(            "SendLocation",            args: <Object>[point.longitude.toString(), point.longitude.toString()],          );        } catch (_) {}      }    } catch (_) {}  }  ///1. AddDelivery (invoke) (Customer)  static Future<void> addDelivery({    required String startLat,    required String startLong,    required String endLat,    required String endLong,    required int distance,    required int price,    required int pickUp,    required int dropOff,  }) async {    if (connectionIsOpen == false || _hubConnection!.state != HubConnectionState.Connected) await openConnection();    try {      _hubConnection!.invoke(        "AddDelivery",        args: <Object>[          startLat,          startLong,          endLat,          endLong,          distance.toString(),          price.toString(),          pickUp.toString(),          dropOff.toString(),        ],      );    } catch (_) {}  }//ReceiveAcceptation(Guid id) (on) (Customer) (driverId)  static void onReceiveAcceptation(List<Object>? arguments) {    if (arguments != null) {      print("ReceiveAcceptation $arguments");    }  }}