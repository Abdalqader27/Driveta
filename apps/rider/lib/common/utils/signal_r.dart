import 'package:core/core.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';import 'package:signalr_netcore/http_connection_options.dart';import 'package:signalr_netcore/hub_connection.dart';import 'package:signalr_netcore/hub_connection_builder.dart';import '../../Models/marker_config.dart';import '../../blocs/map_bloc.dart';import '../../features/data/models/driver.dart';import '../../generated/assets.dart';import '../../libraries/init_app/run_app.dart';class SignalRRider {  static late HubConnection? _hubConnection;  static bool _connectionIsOpen = false;  static const String connectionIsOpenPropName = "connectionIsOpen";  static bool get connectionIsOpen => _connectionIsOpen;  /// For open and close signal R  static Future<bool> openConnection() async {    try {      _hubConnection = HubConnectionBuilder().withUrl(          'http://driveta2-001-site1.itempurl.com/deliveryHub/', options: HttpConnectionOptions(        accessTokenFactory: () async {          return si<SStorage>().get(key: kAccessToken, type: ValueType.string);        },      )).build();      if (_hubConnection!.state != HubConnectionState.Connected) {        await _hubConnection!.start();        _connectionIsOpen = true;        print("SignalR_is_hasConnection is $_connectionIsOpen");      } else {        print("Signal R is Connected");      }      _hubConnection!.on("ReceiveAcceptation", onReceiveAcceptation);      _hubConnection!.on("ReceiveLocations", onReceiveLocations);      return true;    } catch (e) {      print("$e");      return false;    }  }  static Future<void> stopConnection() async {    if (_hubConnection!.state == HubConnectionState.Connected) {      await _hubConnection!.stop();      _hubConnection = null;      _connectionIsOpen = false;      print("SignalR is has$_connectionIsOpen");    }  }  static Future<void> sendLocation({LatLng? point}) async {    try {      if (connectionIsOpen == false || _hubConnection!.state != HubConnectionState.Connected)        await openConnection();      if (point != null) {        try {          _hubConnection!.invoke(            "SendLocation",            args: <Object>[point.longitude.toString(), point.longitude.toString()],          );        } catch (_) {}      }    } catch (_) {}  }  ///1. AddDelivery (invoke) (Customer)  static Future<void> addDelivery({    required String startLat,    required String startLong,    required String endLat,    required String endLong,    required int distance,    required String expectedTime,    required int price,    required String pickUp,    required String dropOff,  }) async {    if (connectionIsOpen == false || _hubConnection!.state != HubConnectionState.Connected) {      await openConnection();    }    try {      _hubConnection!.invoke(        "AddDelivery",        args: <Object>[          {            'startLat': startLat.toString(),            'startLong': startLong.toString(),            'endLat': endLat.toString(),            'endLong': endLong.toString(),            'distance': distance,            'price': price,            'expectedTime': expectedTime,            'pickUp': pickUp.toString(),            'dropOff': dropOff.toString(),          }        ],      );    } catch (e) {}  }//ReceiveAcceptation(Guid id) (on) (Customer) (driverId)  static void onReceiveAcceptation(List<Object>? arguments) {    print("ReceiveAcceptation $arguments");    if (arguments != null) {}  }//ReceiveLocations list drivers  static void onReceiveLocations(List<Object>? arguments) {    if (arguments != null) {      print("onReceiveLocations ${arguments[0]}");      for (var item in arguments[0] as List) {        final driver = Driver.fromJson(item);        si<MapBloc>().setMarker(MarkerConfig(          point: LatLng(double.parse(driver.lat!), double.parse(driver.long!)),          pinPath: Assets.iconsCarTop,          markerId: MarkerId(driver.id.toString()),          snippet: '${driver.name}',          title: '${driver.isAvailable}',        ));      }    }  }}