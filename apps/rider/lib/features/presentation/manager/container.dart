import 'package:core/core.dart';import 'package:design/design.dart';import 'package:rider/features/presentation/manager/bloc.dart';import 'package:rider/features/presentation/manager/state.dart';import '../../../common/utils/bloc_wrapper.dart';class LoginContainer extends StatelessWidget {  final ViewModelBuilder<dynamic> builder;  const LoginContainer({Key? key, required this.builder}) : super(key: key);  @override  Widget build(BuildContext context) {    return BlocSelectorWrapper<dynamic, RiderBloc, RiderState>(      initChild: builder(context, {}),      onRetry: () => context.read<RiderBloc>().retry(),      selector: (state) => state.loginState!,      builder: builder,    );  }}class SignUpContainer extends StatelessWidget {  final ViewModelBuilder<dynamic> builder;  const SignUpContainer({Key? key, required this.builder}) : super(key: key);  @override  Widget build(BuildContext context) {    return BlocSelectorWrapper<dynamic, RiderBloc, RiderState>(      initChild: builder(context, {}),      onRetry: () => context.read<RiderBloc>().retry(),      selector: (state) => state.loginState!,      builder: builder,    );  }}class SupportContainer extends StatelessWidget {  final ViewModelBuilder<dynamic> builder;  const SupportContainer({Key? key, required this.builder}) : super(key: key);  @override  Widget build(BuildContext context) {    return BlocSelectorWrapper<dynamic, RiderBloc, RiderState>(      initChild: builder(context, {}),      onRetry: () => context.read<RiderBloc>().retry(),      selector: (state) => state.supportState!,      builder: builder,    );  }}class GetDeliveriesContainer extends StatelessWidget {  final ViewModelBuilder<dynamic> builder;  const GetDeliveriesContainer({Key? key, required this.builder}) : super(key: key);  @override  Widget build(BuildContext context) {    return BlocSelectorWrapper<dynamic, RiderBloc, RiderState>(      onRetry: () => context.read<RiderBloc>().retry(),      selector: (state) => state.getDeliveriesState!,      builder: builder,    );  }}class GetProfileContainer extends StatelessWidget {  final ViewModelBuilder<dynamic> builder;  const GetProfileContainer({Key? key, required this.builder}) : super(key: key);  @override  Widget build(BuildContext context) {    return BlocSelectorWrapper<dynamic, RiderBloc, RiderState>(      onRetry: () => context.read<RiderBloc>().retry(),      selector: (state) => state.getProfileState!,      builder: builder,    );  }}class EndDeliveryContainer extends StatelessWidget {  final ViewModelBuilder<dynamic> builder;  const EndDeliveryContainer({Key? key, required this.builder}) : super(key: key);  @override  Widget build(BuildContext context) {    return BlocSelectorWrapper<dynamic, RiderBloc, RiderState>(      initChild: builder(context, {}),      onRetry: () => context.read<RiderBloc>().retry(),      selector: (state) => state.endDeliveryState!,      builder: builder,    );  }}class RemoveDeliveryContainer extends StatelessWidget {  final ViewModelBuilder<dynamic> builder;  const RemoveDeliveryContainer({Key? key, required this.builder}) : super(key: key);  @override  Widget build(BuildContext context) {    return BlocSelectorWrapper<dynamic, RiderBloc, RiderState>(      initChild: builder(context, {}),      onRetry: () => context.read<RiderBloc>().retry(),      selector: (state) => state.removeDeliveryState!,      builder: builder,    );  }}class GetVehicleTypesContainer extends StatelessWidget {  final ViewModelBuilder<dynamic> builder;  const GetVehicleTypesContainer({Key? key, required this.builder}) : super(key: key);  @override  Widget build(BuildContext context) {    return BlocSelectorWrapper<dynamic, RiderBloc, RiderState>(      onRetry: () => context.read<RiderBloc>().retry(),      selector: (state) => state.getVehicleTypesState!,      builder: builder,    );  }}