import 'package:network/network.dart';import 'package:rider/features/data/data_sources/rider_api.dart';import '../../../common/utils/connectivity.dart';import '../../../common/utils/helper_method.dart';class RiderRepository {  final SConnectivity _connectivity;  final RiderApi _remote;  RiderRepository({    required SConnectivity connectivity,    required RiderApi remote,  })  : _connectivity = connectivity,        _remote = remote;  Future<ApiResult<dynamic>> addSupport(String text) async {    return await fetchApiResult<dynamic>(      isConnected: _connectivity.isConnected,      fetch: _remote.addSupportText(text),    );  }  Future<ApiResult<dynamic>> endDelivery({required String rate, required String id}) async {    return await fetchApiResult<dynamic>(      isConnected: _connectivity.isConnected,      fetch: _remote.endDelivery(rate: rate, id: id),    );  }  Future<ApiResult<dynamic>> removeDelivery() async {    return await fetchApiResult<dynamic>(      isConnected: _connectivity.isConnected,      fetch: _remote.removeDelivery(),    );  }  Future<ApiResult<dynamic>> getVehicleTypes() async {    return await fetchApiResult<dynamic>(      isConnected: _connectivity.isConnected,      fetch: _remote.getVehicleTypes(),    );  }  Future<ApiResult<dynamic>> profile() async {    return await fetchApiResult<dynamic>(      isConnected: _connectivity.isConnected,      fetch: _remote.profile(),    );  }  Future<ApiResult<dynamic>> getDeliveries() async {    return await fetchApiResult<dynamic>(      isConnected: _connectivity.isConnected,      fetch: _remote.getDeliveries(),    );  }  Future<ApiResult<dynamic>> login({    required String username,    required String password,    required String deviceToken,    bool rememberMe = true,  }) async {    return await fetchApiResult<dynamic>(      isConnected: _connectivity.isConnected,      fetch: _remote.signIn(        username: username,        password: password,        deviceToken: deviceToken,        rememberMe: rememberMe,      ),    );  }  Future<ApiResult<String>> signUp({    required String email,    required String password,    required String deviceToken,    bool rememberMe = true,  }) async {    return await fetchApiResult<String>(      isConnected: _connectivity.isConnected,      fetch: _remote.signUp(),    );  }}