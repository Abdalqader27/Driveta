import 'package:core/core.dart';import 'package:network/network.dart';import '../../../common/utils/helper_method.dart';import '../../../libraries/init_app/run_app.dart';import '../../data/repositories/rider_repository.dart';class RiderUseCase {  RiderUseCase({required RiderRepository repository}) : _repository = repository;  final RiderRepository _repository;  Future<ApiResult<dynamic>> addSupport(String text) async {    return onResult<dynamic>(      await _repository.addSupport(text),      onData: (data) {},    );  }  Future<ApiResult<dynamic>> endDelivery({required String rate, required String id}) async {    return onResult<dynamic>(      await _repository.endDelivery(rate: rate, id: id),      onData: (data) {},    );  }  Future<ApiResult<dynamic>> removeDelivery() async {    return onResult<dynamic>(      await _repository.removeDelivery(),      onData: (data) {},    );  }  Future<ApiResult<dynamic>> getVehicleTypes() async {    return onResult<dynamic>(      await _repository.getVehicleTypes(),      onData: (data) {},    );  }  Future<ApiResult<dynamic>> profile() async {    return onResult<dynamic>(      await _repository.profile(),      onData: (data) {},    );  }  Future<ApiResult<dynamic>> getDeliveries() async {    return onResult<dynamic>(      await _repository.getDeliveries(),      onData: (data) {},    );  }  Future<ApiResult<dynamic>> login({    required String email,    required String password,    required String deviceToken,    bool rememberMe = true,  }) async {    return onResult<dynamic>(      await _repository.login(        username: email,        password: password,        deviceToken: deviceToken,        rememberMe: rememberMe,      ),      onData: (data) {        si<SStorage>().set(key: kAccessToken, value: data.token);      },    );  }}