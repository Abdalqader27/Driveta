/// File created by/// Abed <Abed-supy-io>/// on 27 /Apr/2022part of widgets;class SizeReportingWidget extends StatefulWidget {  final Widget child;  final ValueChanged<Size> onSizeChange;  const SizeReportingWidget({    Key? key,    required this.child,    required this.onSizeChange,  }) : super(key: key);  @override  _SizeReportingWidgetState createState() => _SizeReportingWidgetState();}class _SizeReportingWidgetState extends State<SizeReportingWidget> {  Size? _oldSize;  @override  Widget build(BuildContext context) {    WidgetsBinding.instance.addPostFrameCallback((_) => _notifySize());    return widget.child;  }  void _notifySize() {    if (!mounted) {      return;    }    final size = context.size!;    if (_oldSize != size) {      _oldSize = size;      widget.onSizeChange(size);    }  }}