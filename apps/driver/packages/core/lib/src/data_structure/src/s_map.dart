/// File created by/// Abed <Abed-supy-io>/// on 2 /May/2022part of '../data_structure.dart';///HashMaps/Maps:-/// Searching — O(1) |/// Updating — O(n) |/// Deletion(least recently used key) — O(n)///extension SMap<K, V> on Map<K, V> {  /// # + operator on Map  Map<K, V> operator +(Map<K, V> other) => {...this}..addAll(other);  /// var c= {"A":"A" , "B":"B"}  /// var d= {...c}+ {"D":"D"}  /// the result is d = {"A":"A" , "B":"B" , "D":"D"}  /// # - operator on Map  Map<K, V> operator -(Map<K, V> other) => {...this}..removeWhere(      (k, v) => other.keys.any((element) => element == k),    );  ///  Map<String, int> map1 = {"A": 1, "B": 2, "C": 3};  ///   Map<String, int> map2 = {"B": 2};  ///   var result = map1 - map2;  ///   {A: 1, C: 3}  /// Reads a [key] value of [bool] type from [Map].  ///  /// If value/map is NULL or not [bool] type return default value [defaultBool]  ///  bool getBool(String key) {    Map data = this;    if (data.containsKey(key)) if (data[key] is bool) return this[key] as bool? ?? false;    if (kDebugMode) {      print("Map.getBool[$key] has incorrect data : $this");    }    return false;  }  /// Reads a [key] value of [int] type from [Map].  ///  /// If value/map  is NULL or not [int] type return default value [defaultInt]  ///  int getInt(String key) {    Map? data = this;    if (data.containsKey(key)) return _toInt(data[key]);    if (kDebugMode) {      print("Map.getInt[$key] has incorrect data : $this");    }    return 0;  }  /// Reads a [key] value of [double] type from [Map].  ///  /// If value/map  is NULL or not [double] type return default value [defaultDouble]  ///  double getDouble(String key) {    Map data = this;    if (data.containsKey(key)) return _toDouble(data[key]);    if (kDebugMode) {      print("Map.getDouble[$key] has incorrect data : $this");    }    return 0.0;  }  /// Reads a [key] value of [String] type from [Map].  ///  /// If value/map  is NULL or not [String] type return default value [defaultString]  ///.  String getString(String key) {    Map data = this;    if (data.containsKey(key)) if (data[key] is String) return data[key] ?? '';    if (kDebugMode) {      print("Map.getString[$key] has incorrect data : $this");    }    return '';  }  /// Reads a [key] value of [List] type from [Map].  ///  /// If value/map  is NULL or not [List] type return default value [defaultString]  ///  List<T> getList<T>(String key) {    Map data = this;    if (data.containsKey(key)) if (data[key] is List<T>) return data[key] ?? <T>[];    if (kDebugMode) {      print("Map.getString[$key] has incorrect data : $this");    }    return <T>[];  }}///Parse an object to int if not valid returns 0///int _toInt(Object value) {  try {    int number = int.parse('$value');    return number;  } on Exception catch (e, s) {    if (kDebugMode) {      print("toInt Exception : $e\n$s");    }  }  if (kDebugMode) {    print("Error in toInt $value");  }  return 0;}///Parse an object to double if not valid returns 0///double _toDouble(Object value) {  try {    double number = double.parse('$value');    return number;  } on Exception catch (e, s) {    if (kDebugMode) {      print("toDouble Exception : $e\n$s");    }  }  if (kDebugMode) {    print("Error in toDouble $value");  }  return 0;}