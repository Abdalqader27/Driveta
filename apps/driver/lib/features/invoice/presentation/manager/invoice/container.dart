import 'package:core/core.dart';import 'package:design/design.dart';import 'package:driver/features/invoice/presentation/manager/invoice/bloc.dart';import 'package:driver/features/invoice/presentation/manager/invoice/event.dart';import 'package:driver/features/invoice/presentation/manager/invoice/state.dart';import '../../../../../common/utils/bloc_wrapper.dart';class InvoiceContainer extends StatelessWidget {  final ViewModelBuilder<dynamic> builder;  const InvoiceContainer({Key? key, required this.builder}) : super(key: key);  @override  Widget build(BuildContext context) {    return Builder(builder: (context) {      context.read<InvoiceBloc>().add(GetInvoicesEvent());      return BlocSelectorWrapper<dynamic, InvoiceBloc, InvoiceState>(        onInit: () {          context.read<InvoiceBloc>().add(GetInvoicesEvent());        },        onRetry: () => context.read<InvoiceBloc>().retry(),        selector: (state) => state.invoiceState!,        builder: builder,      );    });  }}class StatisticsContainer extends StatelessWidget {  final ViewModelBuilder<dynamic> builder;  const StatisticsContainer({Key? key, required this.builder}) : super(key: key);  @override  Widget build(BuildContext context) {    return Builder(builder: (context) {      context.read<InvoiceBloc>().add(GetStatisticsEvent());      return BlocSelectorWrapper<dynamic, InvoiceBloc, InvoiceState>(        onInit: () {          context.read<InvoiceBloc>().add(GetStatisticsEvent());        },        onRetry: () => context.read<InvoiceBloc>().retry(),        selector: (state) => state.statisticsSate!,        builder: builder,      );    });  }}