import 'package:core/core.dart';import 'package:google_maps_flutter/google_maps_flutter.dart';import 'package:logging/logging.dart';import 'package:signalr_netcore/http_connection_options.dart';import 'package:signalr_netcore/hub_connection.dart';import 'package:signalr_netcore/hub_connection_builder.dart';import '../../app_injection.dart';import '../../features/injections/injection_network.dart';class SignalRConnection {  static late HubConnection? _hubConnection;  static bool _connectionIsOpen = false;  static const String connectionIsOpenPropName = "connectionIsOpen";  static bool get connectionIsOpen => _connectionIsOpen;  /// For open and close signal R  static Future<bool> openConnection() async {    try {      //_hubConnection = HubConnectionBuilder().withUrl('${kBaseUrl}deliveryHub/').build();      _hubConnection = HubConnectionBuilder().withUrl('http://driveta2-001-site1.itempurl.com/deliveryHub/',          options: HttpConnectionOptions(        accessTokenFactory: () async {          //  logD(si<SStorage>().get(key: kAccessToken, type: ValueType.string));          return si<SStorage>().get(key: kAccessToken, type: ValueType.string);        },      )).build();      _hubConnection?.serverTimeoutInMilliseconds = 100000000000;      //   _hubConnection!.onclose( (error) => print("Connection Closed"));      // _hubConnection.on("OnRealLocationCaptain", onRealLocationCaptain);      if (_hubConnection!.state != HubConnectionState.Connected) {        await _hubConnection!.start();        /// to Save connection id in dataBase        // _connectionIsOpen = await reFixConnectionIdUser(userId: await MyObjects.mySharedPrefsHelper.getId());        _connectionIsOpen = true;        print("SignalR_is_hasConnection is $_connectionIsOpen");      } else {        print("Signal R is Connected");      }      return true;    } catch (e) {      logE("$e");      return false;    }  }  static Future<void> stopConnection() async {    if (_hubConnection!.state == HubConnectionState.Connected) {      await _hubConnection!.stop();      _hubConnection = null;      _connectionIsOpen = false;      print("SignalR is has$_connectionIsOpen");    }  }  static Future<void> sendLocation({LatLng? point}) async {    print("_hubConnection is has${_hubConnection!.state}");    try {      // print("sendLocation here ");      if (connectionIsOpen == false || _hubConnection!.state != HubConnectionState.Connected) await openConnection();      if (point != null) {        try {          _hubConnection!.invoke(            "SendLocation",            args: <Object>[point.longitude.toString(), point.longitude.toString()],          );        } catch (e) {          print("_hubConnection is has${_hubConnection!.state}");          print("invoke catch $e");        }      }      print("sendLocation$point");    } catch (e) {      logD("hhhh${_hubConnection?.state}");      print("catcher$e");    }  }}