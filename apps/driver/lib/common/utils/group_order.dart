import '../../features/data/models/delivers.dart';class Grouping {  factory Grouping.date({    required Delivers item,    required List<Delivers> list,    required int index,  }) {    return _groupingByDate(      item: item,      list: list,      index: index,    );  }  static Grouping _groupingByDate({    required Delivers item,    required List<Delivers> list,    required int index,  }) {    print("DATEEE${item.date}");    int count = 0;    bool isNewMonth = false;    bool isNewDay = false;    if (index == 0) {      isNewMonth = true;      isNewDay = true;      count =          list.where((o) => int.parse(o.date) == int.parse(item.date)).length;    } else {      if (index >= 0 && index < list.length) {        final Delivers prevOrder = list[index - 1];        if (prevOrder.parseDate.month != prevOrder.parseDate.month) {          isNewMonth = true;        }        if (prevOrder.parseDate.day == prevOrder.parseDate.day &&            prevOrder.parseDate.month == prevOrder.parseDate.month &&            prevOrder.parseDate.year == prevOrder.parseDate.year) {          isNewDay = false;        } else {          isNewDay = true;          count = list.where((o) => o.date == item.date).length;        }      }    }    return OrderDateGroup(      count: count,      isNewMonth: isNewMonth,      isNewDay: isNewDay,    );  }}class OrderDateGroup implements Grouping {  final int count;  final bool isNewMonth;  final bool isNewDay;  OrderDateGroup({    required this.count,    required this.isNewMonth,    required this.isNewDay,  });}